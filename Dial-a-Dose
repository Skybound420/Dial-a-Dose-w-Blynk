/* 
8 head peristaltic dosing pump module controlled by Arduino and Blynk

 Download the latest Blynk Library.  https://www.blynk.cc/getting-started/
 App Setup: 
 8 - LED widgets (V5-V12), indicators for each pump
 2 - Step V widgets;
     - DOSEml; (V1), Output 0-80, Step: 0.25, Send Step-NO, Loop Values-ON
     - calibration; (V3), Output 0-1000, Step-5.0, Send Step-NO, Loop Values-ON
 1 - Button widget; (V2), set to Switch (0-1)
 1 - Menu widget; (V0), add up to 8 Items and name each accordingly
*/
#include <SPI.h>                      //Used by Blynk
#include <Ethernet.h>                 //Used by Blynk
#include <BlynkSimpleEthernet.h>      //Used by Blynk
#include <SimpleTimer.h>
#define BLYNK_PRINT Serial
char auth[] = "PasteAuthCodeBetweenQuotes";       //Paste code that app emailed you between "quotes"

//-Digital Pins - Peristaltic Pump Variables - 00 Series Pins
const int pumpPin[8] = { 2, 3, 4, 5, 6, 7, 8, 9 };      //Digital Pins
uint32_t multiplier[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };    //Number of ms per ml
uint32_t startPump = 0;                                 //Records start time
uint32_t runCount;                                      //Determines length of time needed
bool pumpRunning = false;
const char *nuteType[8] = { "Liquid 1", "Liquid 2", "Liquid 3", "Liquid 4",
                            "Liquid 5", "Liquid 6", "Liquid 7", "Liquid 8"
                          }; //^^^Text Printed to Terminal Widget in array position[x]

float DOSEml;      //Step Widget (0.25 per step, send step/NO, loop values ON)
int button = 0;    //Button Widget set to Switch
int x;             //Correlates Array Positions with Pump Motor Pins
int calibration;   //Step Widget (0-1000) Adjusts multiplier and applies to array position[x]

BLYNK_WRITE(V0) {
  x = param.asInt() - 1;
}
BLYNK_WRITE(V1) {
  DOSEml = param.asFloat();
}
BLYNK_WRITE(V2) {
  button = param.asInt();
}
BLYNK_WRITE(V3) {
  calibration = param.asInt();
}

SimpleTimer timer;                    //SimpleTimer instance named timer
WidgetTerminal terminal(V4);

void setup()
{
  Serial.begin(9600);
  Blynk.begin(auth);
  while (Blynk.connect() == false) {}
  timer.setInterval(200L, dosingPumps);   //5 readings per second to achieve 1/4ml accuracy
  for (int p = 0; p <= 7; p++)
  {
    pinMode(pumpPin[p], OUTPUT);
  }
  Blynk.virtualWrite(V0, 0);
  Blynk.virtualWrite(V1, 0);
  Blynk.virtualWrite(V2, 0);
  Blynk.virtualWrite(V3, 0);
}

void loop()
{
  Blynk.run();
  timer.run();
}

void dosingPumps()
{
  if (button == 1 && pumpRunning == false)
  {
    multiplier[x] = calibration;
    Blynk.virtualWrite(V0, 0);
    Blynk.virtualWrite(V1, 0);
    Blynk.virtualWrite(V2, 0);
    pumpRunning = true;
    digitalWrite(pumpPin[x], HIGH);
    Blynk.virtualWrite(pumpPin[x] + 3, 255);         //LED widget illuminates when pump is turned on
    startPump = millis();
    runCount = DOSEml * multiplier[x];
    terminal.print("Dosing in: ");
    terminal.print(DOSEml);
    terminal.print(" milliliters of ");
    terminal.println(nuteType[x]);
  }
  if (millis() - startPump > runCount)
  {
    digitalWrite(pumpPin[x], LOW);
    Blynk.virtualWrite(pumpPin[x] + 3, 0);           //LED widget indicates pump is turned off
    pumpRunning = false;
    button = 0;
  }
  terminal.flush();
}
